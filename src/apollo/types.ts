/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface IQuery {
  SpotifysearchArtistByName?: IISearchArtistByName;
  SpotifyAlbumsByArtistId?: IISearchAlbumByArtistId;
  SpotifyTracksAlbumById?: IISearchAlbumTracks;
  SpotifySearchPlaylist?: IISearchPlaylist;
  SpotifyTracksByPlaylist?: IISearchAlbumTracks;
  SpotifySearch?: IISearchAll;
  listAlbums?: IlistAlbumsByArtistPagination;
  listArtists?: IListArtistsPagination;
  listPlaylists?: IISearchPlaylist;
  listTracks?: IISearchAlbumTracks;
  listCategoriesArtist?: IListCategories;
  artistById?: IIArtist;
  albumById?: IIAlbum;
  playlistById?: IIPlaylist;
  trackById?: IITrack;
}

export interface IISearchArtistByName {
  items?: Array<IIArtist | null>;
  totalCount?: number;
  pageInfo?: IIPaginationInfo;
}

export interface IIArtist {
  id?: string;
  name?: string;
  photo?: string;
  followers?: number;
  popularity?: number;
  genres?: Array<string | null>;
  uri?: string;
  spotify_url?: string;
}

export interface IIPaginationInfo {
  hasNextPage?: boolean;
  hasPreviousPage?: boolean;
}

export interface IISearchAlbumByArtistId {
  items?: Array<IIAlbum | null>;
  totalCount?: number;
  pageInfo?: IIPaginationInfo;
}

export interface IIAlbum {
  id?: string;
  album_type?: string;
  artists?: Array<IIArtist | null>;
  album_group?: string;
  label?: string;
  popularity?: number;
  available_markets?: Array<string | null>;
  spotify_url?: string;
  photo?: string;
  name?: string;
  release_date?: string;
  release_date_precision?: string;
  total_tracks?: number;
  uri?: string;
}

export interface IISearchAlbumTracks {
  items?: Array<IITrack | null>;
  totalCount?: number;
  pageInfo?: IIPaginationInfo;
}

export interface IITrack {
  id?: string;
  name?: string;
  artists?: Array<IIArtist | null>;
  available_markets?: Array<string | null>;
  album_id?: string;
  album?: IIAlbum;
  disc_number?: number;
  duration_ms?: number;
  explicit?: boolean;
  spotify_url?: string;
  preview_url?: string;
  track_number?: number;
  uri?: string;
}

export interface IISearchPlaylist {
  items?: Array<IIPlaylist | null>;
  totalCount?: number;
  pageInfo?: IIPaginationInfo;
}

export interface IIPlaylist {
  collaborative?: boolean;
  description?: string;
  spotify_url?: string;
  id?: string;
  photo?: string;
  name?: string;
  owner?: IIOwn;
  total_tracks?: number;
  uri?: string;
}

export interface IIOwn {
  name?: string;
  id?: string;
  type?: string;
  uri?: string;
  spotify_url?: string;
}

export enum ISearchInclude {
  album = 'album',
  artist = 'artist',
  playlist = 'playlist',
  track = 'track'
}

export interface IISearchAll {
  albums?: IISearchAlbumByArtistId;
  artists?: IISearchArtistByName;
  playlists?: IISearchPlaylist;
  tracks?: IISearchAlbumTracks;
}

export interface IInputListAlbumByArtist {
  artistName?: string;
  artistId?: string;
  albumName?: string;
  label?: string;
  release_date?: IOrderPagination;
  artistIds?: Array<string | null>;
  total_tracks?: IOrderPagination;
  createdAt?: IOrderPagination;
  popularity?: IOrderPagination;
}

export enum IOrderPagination {
  ASC = 'ASC',
  DESC = 'DESC'
}

export interface IlistAlbumsByArtistPagination {
  items?: Array<IIAlbum | null>;
  totalCount?: number;
  pageInfo?: IIPaginationInfo;
}

export interface IInputListArtistFilter {
  artistName?: string;
  followers?: IOrderPagination;
  createdAt?: IOrderPagination;
  popularity?: IOrderPagination;
  genres?: Array<string | null>;
}

export interface IListArtistsPagination {
  items?: Array<IIArtist | null>;
  totalCount?: number;
  pageInfo?: IIPaginationInfo;
}

export interface IInputFilterPlaylists {
  playlistName?: string;
}

export interface IInputFilterTracks {
  artistId?: string;
  artistName?: string;
  albumId?: string;
  trackName?: string;
  explicit?: boolean;
  track_number?: IOrderPagination;
  createdAt?: IOrderPagination;
  duration_ms?: IOrderPagination;
  name?: IOrderPagination;
  disc_number?: IOrderPagination;
}

export interface IListFilterCategoriesArtist {
  label?: IOrderPagination;
  labelName?: string;
}

export interface IListCategories {
  items?: Array<IICategoryArtist | null>;
  totalCount?: number;
  pageInfo?: IIPaginationInfo;
}

export interface IICategoryArtist {
  label?: string;
  id?: number;
}

export interface IMutation {
  defaultMutate?: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface IResolver {
  Query?: IQueryTypeResolver;
  ISearchArtistByName?: IISearchArtistByNameTypeResolver;
  IArtist?: IIArtistTypeResolver;
  IPaginationInfo?: IIPaginationInfoTypeResolver;
  ISearchAlbumByArtistId?: IISearchAlbumByArtistIdTypeResolver;
  IAlbum?: IIAlbumTypeResolver;
  ISearchAlbumTracks?: IISearchAlbumTracksTypeResolver;
  ITrack?: IITrackTypeResolver;
  ISearchPlaylist?: IISearchPlaylistTypeResolver;
  IPlaylist?: IIPlaylistTypeResolver;
  IOwn?: IIOwnTypeResolver;
  ISearchAll?: IISearchAllTypeResolver;
  listAlbumsByArtistPagination?: IlistAlbumsByArtistPaginationTypeResolver;
  ListArtistsPagination?: IListArtistsPaginationTypeResolver;
  ListCategories?: IListCategoriesTypeResolver;
  ICategoryArtist?: IICategoryArtistTypeResolver;
  Mutation?: IMutationTypeResolver;
}
export interface IQueryTypeResolver<TParent = any> {
  SpotifysearchArtistByName?: QueryToSpotifysearchArtistByNameResolver<TParent>;
  SpotifyAlbumsByArtistId?: QueryToSpotifyAlbumsByArtistIdResolver<TParent>;
  SpotifyTracksAlbumById?: QueryToSpotifyTracksAlbumByIdResolver<TParent>;
  SpotifySearchPlaylist?: QueryToSpotifySearchPlaylistResolver<TParent>;
  SpotifyTracksByPlaylist?: QueryToSpotifyTracksByPlaylistResolver<TParent>;
  SpotifySearch?: QueryToSpotifySearchResolver<TParent>;
  listAlbums?: QueryToListAlbumsResolver<TParent>;
  listArtists?: QueryToListArtistsResolver<TParent>;
  listPlaylists?: QueryToListPlaylistsResolver<TParent>;
  listTracks?: QueryToListTracksResolver<TParent>;
  listCategoriesArtist?: QueryToListCategoriesArtistResolver<TParent>;
  artistById?: QueryToArtistByIdResolver<TParent>;
  albumById?: QueryToAlbumByIdResolver<TParent>;
  playlistById?: QueryToPlaylistByIdResolver<TParent>;
  trackById?: QueryToTrackByIdResolver<TParent>;
}

export interface QueryToSpotifysearchArtistByNameArgs {
  take: number;
  skip: number;
  nameArtist: string;
}
export interface QueryToSpotifysearchArtistByNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSpotifysearchArtistByNameArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSpotifyAlbumsByArtistIdArgs {
  take: number;
  skip: number;
  artistId: string;
}
export interface QueryToSpotifyAlbumsByArtistIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSpotifyAlbumsByArtistIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSpotifyTracksAlbumByIdArgs {
  take: number;
  skip: number;
  albumId: string;
}
export interface QueryToSpotifyTracksAlbumByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSpotifyTracksAlbumByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSpotifySearchPlaylistArgs {
  take: number;
  skip: number;
  namePlaylist: string;
}
export interface QueryToSpotifySearchPlaylistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSpotifySearchPlaylistArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSpotifyTracksByPlaylistArgs {
  take: number;
  skip: number;
  playlistId: string;
}
export interface QueryToSpotifyTracksByPlaylistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSpotifyTracksByPlaylistArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSpotifySearchArgs {
  includeSearch: Array<ISearchInclude | null>;
  search: string;
  take: number;
  skip: number;
}
export interface QueryToSpotifySearchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSpotifySearchArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListAlbumsArgs {
  take: number;
  skip: number;
  filter?: IInputListAlbumByArtist;
}
export interface QueryToListAlbumsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToListAlbumsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListArtistsArgs {
  take: number;
  skip: number;
  filter?: IInputListArtistFilter;
}
export interface QueryToListArtistsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToListArtistsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListPlaylistsArgs {
  take: number;
  skip: number;
  filter?: IInputFilterPlaylists;
  order: IOrderPagination;
}
export interface QueryToListPlaylistsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToListPlaylistsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListTracksArgs {
  take: number;
  skip: number;
  filter?: IInputFilterTracks;
}
export interface QueryToListTracksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToListTracksArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListCategoriesArtistArgs {
  take: number;
  skip: number;
  filter?: IListFilterCategoriesArtist;
}
export interface QueryToListCategoriesArtistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToListCategoriesArtistArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToArtistByIdArgs {
  artistId: string;
}
export interface QueryToArtistByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToArtistByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAlbumByIdArgs {
  albumId: string;
}
export interface QueryToAlbumByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAlbumByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPlaylistByIdArgs {
  playlistById: string;
}
export interface QueryToPlaylistByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPlaylistByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTrackByIdArgs {
  trackId: string;
}
export interface QueryToTrackByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTrackByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IISearchArtistByNameTypeResolver<TParent = any> {
  items?: ISearchArtistByNameToItemsResolver<TParent>;
  totalCount?: ISearchArtistByNameToTotalCountResolver<TParent>;
  pageInfo?: ISearchArtistByNameToPageInfoResolver<TParent>;
}

export interface ISearchArtistByNameToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISearchArtistByNameToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISearchArtistByNameToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IIArtistTypeResolver<TParent = any> {
  id?: IArtistToIdResolver<TParent>;
  name?: IArtistToNameResolver<TParent>;
  photo?: IArtistToPhotoResolver<TParent>;
  followers?: IArtistToFollowersResolver<TParent>;
  popularity?: IArtistToPopularityResolver<TParent>;
  genres?: IArtistToGenresResolver<TParent>;
  uri?: IArtistToUriResolver<TParent>;
  spotify_url?: IArtistToSpotify_urlResolver<TParent>;
}

export interface IArtistToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IArtistToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IArtistToPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IArtistToFollowersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IArtistToPopularityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IArtistToGenresResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IArtistToUriResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IArtistToSpotify_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IIPaginationInfoTypeResolver<TParent = any> {
  hasNextPage?: IPaginationInfoToHasNextPageResolver<TParent>;
  hasPreviousPage?: IPaginationInfoToHasPreviousPageResolver<TParent>;
}

export interface IPaginationInfoToHasNextPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPaginationInfoToHasPreviousPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IISearchAlbumByArtistIdTypeResolver<TParent = any> {
  items?: ISearchAlbumByArtistIdToItemsResolver<TParent>;
  totalCount?: ISearchAlbumByArtistIdToTotalCountResolver<TParent>;
  pageInfo?: ISearchAlbumByArtistIdToPageInfoResolver<TParent>;
}

export interface ISearchAlbumByArtistIdToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISearchAlbumByArtistIdToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISearchAlbumByArtistIdToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IIAlbumTypeResolver<TParent = any> {
  id?: IAlbumToIdResolver<TParent>;
  album_type?: IAlbumToAlbum_typeResolver<TParent>;
  artists?: IAlbumToArtistsResolver<TParent>;
  album_group?: IAlbumToAlbum_groupResolver<TParent>;
  label?: IAlbumToLabelResolver<TParent>;
  popularity?: IAlbumToPopularityResolver<TParent>;
  available_markets?: IAlbumToAvailable_marketsResolver<TParent>;
  spotify_url?: IAlbumToSpotify_urlResolver<TParent>;
  photo?: IAlbumToPhotoResolver<TParent>;
  name?: IAlbumToNameResolver<TParent>;
  release_date?: IAlbumToRelease_dateResolver<TParent>;
  release_date_precision?: IAlbumToRelease_date_precisionResolver<TParent>;
  total_tracks?: IAlbumToTotal_tracksResolver<TParent>;
  uri?: IAlbumToUriResolver<TParent>;
}

export interface IAlbumToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAlbumToAlbum_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAlbumToArtistsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAlbumToAlbum_groupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAlbumToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAlbumToPopularityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAlbumToAvailable_marketsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAlbumToSpotify_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAlbumToPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAlbumToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAlbumToRelease_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAlbumToRelease_date_precisionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAlbumToTotal_tracksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAlbumToUriResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IISearchAlbumTracksTypeResolver<TParent = any> {
  items?: ISearchAlbumTracksToItemsResolver<TParent>;
  totalCount?: ISearchAlbumTracksToTotalCountResolver<TParent>;
  pageInfo?: ISearchAlbumTracksToPageInfoResolver<TParent>;
}

export interface ISearchAlbumTracksToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISearchAlbumTracksToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISearchAlbumTracksToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IITrackTypeResolver<TParent = any> {
  id?: ITrackToIdResolver<TParent>;
  name?: ITrackToNameResolver<TParent>;
  artists?: ITrackToArtistsResolver<TParent>;
  available_markets?: ITrackToAvailable_marketsResolver<TParent>;
  album_id?: ITrackToAlbum_idResolver<TParent>;
  album?: ITrackToAlbumResolver<TParent>;
  disc_number?: ITrackToDisc_numberResolver<TParent>;
  duration_ms?: ITrackToDuration_msResolver<TParent>;
  explicit?: ITrackToExplicitResolver<TParent>;
  spotify_url?: ITrackToSpotify_urlResolver<TParent>;
  preview_url?: ITrackToPreview_urlResolver<TParent>;
  track_number?: ITrackToTrack_numberResolver<TParent>;
  uri?: ITrackToUriResolver<TParent>;
}

export interface ITrackToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITrackToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITrackToArtistsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITrackToAvailable_marketsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITrackToAlbum_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITrackToAlbumResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITrackToDisc_numberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITrackToDuration_msResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITrackToExplicitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITrackToSpotify_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITrackToPreview_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITrackToTrack_numberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITrackToUriResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IISearchPlaylistTypeResolver<TParent = any> {
  items?: ISearchPlaylistToItemsResolver<TParent>;
  totalCount?: ISearchPlaylistToTotalCountResolver<TParent>;
  pageInfo?: ISearchPlaylistToPageInfoResolver<TParent>;
}

export interface ISearchPlaylistToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISearchPlaylistToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISearchPlaylistToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IIPlaylistTypeResolver<TParent = any> {
  collaborative?: IPlaylistToCollaborativeResolver<TParent>;
  description?: IPlaylistToDescriptionResolver<TParent>;
  spotify_url?: IPlaylistToSpotify_urlResolver<TParent>;
  id?: IPlaylistToIdResolver<TParent>;
  photo?: IPlaylistToPhotoResolver<TParent>;
  name?: IPlaylistToNameResolver<TParent>;
  owner?: IPlaylistToOwnerResolver<TParent>;
  total_tracks?: IPlaylistToTotal_tracksResolver<TParent>;
  uri?: IPlaylistToUriResolver<TParent>;
}

export interface IPlaylistToCollaborativeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPlaylistToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPlaylistToSpotify_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPlaylistToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPlaylistToPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPlaylistToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPlaylistToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPlaylistToTotal_tracksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPlaylistToUriResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IIOwnTypeResolver<TParent = any> {
  name?: IOwnToNameResolver<TParent>;
  id?: IOwnToIdResolver<TParent>;
  type?: IOwnToTypeResolver<TParent>;
  uri?: IOwnToUriResolver<TParent>;
  spotify_url?: IOwnToSpotify_urlResolver<TParent>;
}

export interface IOwnToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IOwnToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IOwnToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IOwnToUriResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IOwnToSpotify_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IISearchAllTypeResolver<TParent = any> {
  albums?: ISearchAllToAlbumsResolver<TParent>;
  artists?: ISearchAllToArtistsResolver<TParent>;
  playlists?: ISearchAllToPlaylistsResolver<TParent>;
  tracks?: ISearchAllToTracksResolver<TParent>;
}

export interface ISearchAllToAlbumsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISearchAllToArtistsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISearchAllToPlaylistsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISearchAllToTracksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IlistAlbumsByArtistPaginationTypeResolver<TParent = any> {
  items?: listAlbumsByArtistPaginationToItemsResolver<TParent>;
  totalCount?: listAlbumsByArtistPaginationToTotalCountResolver<TParent>;
  pageInfo?: listAlbumsByArtistPaginationToPageInfoResolver<TParent>;
}

export interface listAlbumsByArtistPaginationToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface listAlbumsByArtistPaginationToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface listAlbumsByArtistPaginationToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IListArtistsPaginationTypeResolver<TParent = any> {
  items?: ListArtistsPaginationToItemsResolver<TParent>;
  totalCount?: ListArtistsPaginationToTotalCountResolver<TParent>;
  pageInfo?: ListArtistsPaginationToPageInfoResolver<TParent>;
}

export interface ListArtistsPaginationToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListArtistsPaginationToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListArtistsPaginationToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IListCategoriesTypeResolver<TParent = any> {
  items?: ListCategoriesToItemsResolver<TParent>;
  totalCount?: ListCategoriesToTotalCountResolver<TParent>;
  pageInfo?: ListCategoriesToPageInfoResolver<TParent>;
}

export interface ListCategoriesToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListCategoriesToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListCategoriesToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IICategoryArtistTypeResolver<TParent = any> {
  label?: ICategoryArtistToLabelResolver<TParent>;
  id?: ICategoryArtistToIdResolver<TParent>;
}

export interface ICategoryArtistToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICategoryArtistToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMutationTypeResolver<TParent = any> {
  defaultMutate?: MutationToDefaultMutateResolver<TParent>;
}

export interface MutationToDefaultMutateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
